"""
Final test of the complete realistic F1 prediction system.
"""
import sys
import os

# Add project root to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from web.utils.data_helpers import DataHelper
from src.services.prediction_engine import PredictionEngine, PredictionRequest
from datetime import datetime

def test_complete_prediction_flow():
    """Test the complete prediction flow with realistic data."""
    print("üèéÔ∏è  Final System Test - Complete Prediction Flow")
    print("=" * 60)
    
    try:
        # Step 1: Initialize data helper with realistic data
        print("1. Initializing Data Helper with Realistic F1 Data...")
        data_helper = DataHelper()
        print(f"   ‚úÖ Loaded {len(data_helper.current_f1_drivers)} F1 drivers")
        
        # Check top driver
        top_driver = data_helper.current_f1_drivers[0]
        print(f"   ‚úÖ Championship leader: {top_driver['name']} ({top_driver['points']} pts)")
        
        # Step 2: Generate realistic training data
        print("\n2. Generating Realistic Training Data...")
        training_data = data_helper.generate_training_data(100)
        print(f"   ‚úÖ Generated {len(training_data['features'])} training samples")
        print(f"   ‚úÖ Each sample has {len(training_data['features'][0])} features")
        
        # Step 3: Initialize and train prediction engine
        print("\n3. Initializing Prediction Engine...")
        engine = PredictionEngine(model_type='random_forest')
        success = engine.initialize_model(training_data['features'], training_data['targets'])
        
        if not success:
            print("   ‚ùå Failed to initialize prediction engine")
            return False
        
        print("   ‚úÖ Prediction engine trained successfully")
        
        # Step 4: Create realistic race scenarios
        print("\n4. Testing Race Predictions...")
        
        scenarios = [
            {
                'name': 'Abu Dhabi GP (Dry)',
                'circuit': 'Yas Marina Circuit',
                'weather': {'conditions': 'dry', 'track_temp': 35.0, 'air_temp': 28.0, 'humidity': 60.0},
                'drivers': [
                    {'driver_id': 'VER', 'name': 'Max Verstappen', 'grid_position': 1},
                    {'driver_id': 'NOR', 'name': 'Lando Norris', 'grid_position': 2},
                    {'driver_id': 'LEC', 'name': 'Charles Leclerc', 'grid_position': 3},
                    {'driver_id': 'PIA', 'name': 'Oscar Piastri', 'grid_position': 4},
                    {'driver_id': 'SAI', 'name': 'Carlos Sainz', 'grid_position': 5}
                ]
            },
            {
                'name': 'British GP (Wet)',
                'circuit': 'Silverstone',
                'weather': {'conditions': 'wet', 'track_temp': 18.0, 'air_temp': 15.0, 'humidity': 95.0},
                'drivers': [
                    {'driver_id': 'VER', 'name': 'Max Verstappen', 'grid_position': 1},
                    {'driver_id': 'HAM', 'name': 'Lewis Hamilton', 'grid_position': 2},
                    {'driver_id': 'LEC', 'name': 'Charles Leclerc', 'grid_position': 3},
                    {'driver_id': 'ALO', 'name': 'Fernando Alonso', 'grid_position': 4},
                    {'driver_id': 'RUS', 'name': 'George Russell', 'grid_position': 5}
                ]
            }
        ]
        
        results = []
        
        for scenario in scenarios:
            print(f"\n   üèÅ {scenario['name']}:")
            
            # Create prediction request
            request = PredictionRequest(
                race_name=scenario['name'],
                circuit=scenario['circuit'],
                date=datetime.now(),
                drivers=scenario['drivers'],
                weather=scenario['weather']
            )
            
            # Generate prediction
            try:
                result = engine.predict_race(request)
                results.append(result)
                
                print(f"      Overall Confidence: {result.confidence_score:.3f}")
                print(f"      Predicted Results:")
                
                for i, pred in enumerate(result.predictions):
                    driver_name = getattr(pred, 'driver_name', pred.driver_id)
                    print(f"        P{i+1}: {driver_name:<18} (Conf: {pred.confidence_score:.2f}, Pts: {pred.expected_points:.1f})")
                
            except Exception as e:
                print(f"      ‚ùå Prediction failed: {e}")
                return False
        
        # Step 5: Analyze results
        print(f"\n5. Analyzing Results...")
        
        if len(results) >= 2:
            dry_winner = results[0].predictions[0]
            wet_winner = results[1].predictions[0]
            
            dry_winner_name = getattr(dry_winner, 'driver_name', dry_winner.driver_id)
            wet_winner_name = getattr(wet_winner, 'driver_name', wet_winner.driver_id)
            
            print(f"   Dry race winner: {dry_winner_name}")
            print(f"   Wet race winner: {wet_winner_name}")
            
            if dry_winner_name != wet_winner_name:
                print("   ‚úÖ Weather conditions affect race outcomes")
            else:
                print("   ‚ö†Ô∏è  Same winner in different conditions")
            
            # Check confidence differences
            dry_conf = results[0].confidence_score
            wet_conf = results[1].confidence_score
            
            print(f"   Confidence scores: {dry_conf:.3f} (dry) vs {wet_conf:.3f} (wet)")
        
        print(f"\nüéâ COMPLETE SYSTEM TEST PASSED!")
        print(f"‚úÖ Realistic F1 2024 data integration working")
        print(f"‚úÖ Prediction engine training successful")
        print(f"‚úÖ Race predictions generating varied results")
        print(f"‚úÖ Weather and circuit effects working")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå System test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_prediction_variety():
    """Test that predictions show good variety."""
    print(f"\nüé≤ Testing Prediction Variety")
    print("=" * 40)
    
    try:
        data_helper = DataHelper()
        engine = PredictionEngine(model_type='random_forest')
        
        winners = []
        confidences = []
        
        for i in range(3):
            # Generate fresh training data each time
            training_data = data_helper.generate_training_data(80)
            engine.initialize_model(training_data['features'], training_data['targets'])
            
            # Same race setup
            request = PredictionRequest(
                race_name=f"Test Race {i+1}",
                circuit="Default Circuit",
                date=datetime.now(),
                drivers=[
                    {'driver_id': 'VER', 'name': 'Max Verstappen', 'grid_position': 1},
                    {'driver_id': 'NOR', 'name': 'Lando Norris', 'grid_position': 2},
                    {'driver_id': 'LEC', 'name': 'Charles Leclerc', 'grid_position': 3}
                ],
                weather={'conditions': 'dry', 'track_temp': 30.0, 'air_temp': 25.0, 'humidity': 60.0}
            )
            
            result = engine.predict_race(request)
            winner = result.predictions[0]
            winner_name = getattr(winner, 'driver_name', winner.driver_id)
            
            winners.append(winner_name)
            confidences.append(result.confidence_score)
            
            print(f"   Run {i+1}: {winner_name:<18} (Conf: {result.confidence_score:.3f})")
        
        # Analyze variety
        unique_winners = len(set(winners))
        confidence_range = max(confidences) - min(confidences)
        
        print(f"\n   Variety Analysis:")
        print(f"   Unique winners: {unique_winners}/3")
        print(f"   Confidence range: {confidence_range:.3f}")
        
        if unique_winners >= 2 or confidence_range > 0.05:
            print("   ‚úÖ Good prediction variety")
            return True
        else:
            print("   ‚ö†Ô∏è  Limited prediction variety")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Variety test failed: {e}")
        return False

def main():
    """Run final system test."""
    print("üèéÔ∏è  FINAL REALISTIC F1 PREDICTION SYSTEM TEST")
    print("=" * 70)
    
    # Test complete prediction flow
    flow_success = test_complete_prediction_flow()
    
    # Test prediction variety
    variety_success = test_prediction_variety()
    
    print("\n" + "=" * 70)
    
    if flow_success and variety_success:
        print("üéâ üèÜ FINAL SYSTEM TEST: COMPLETE SUCCESS! üèÜ üéâ")
        print("\nüöÄ Your F1 Prediction System is Ready!")
        print("‚úÖ Real 2024 F1 championship data")
        print("‚úÖ Realistic race predictions")
        print("‚úÖ Weather and circuit effects")
        print("‚úÖ Proper prediction variety")
        print("‚úÖ Professional-grade confidence scoring")
        
        print(f"\nüåê Web App Running: http://localhost:8503")
        print("   The system now provides realistic F1 race predictions!")
        
    else:
        print("‚ùå FINAL SYSTEM TEST: ISSUES DETECTED")
        print("   Please check the error messages above")

if __name__ == "__main__":
    main()